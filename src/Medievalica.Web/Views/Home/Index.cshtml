@{
    ViewData["Title"] = "Home Page";
}

<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
    <ol class="carousel-indicators">
        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
        <li data-target="#myCarousel" data-slide-to="1"></li>
        <li data-target="#myCarousel" data-slide-to="2"></li>
        <li data-target="#myCarousel" data-slide-to="3"></li>
    </ol>
    <div class="carousel-inner" role="listbox">
        <div class="item active">
            <img src="~/images/banner1.svg" alt="ASP.NET" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Learn how to build ASP.NET apps that can run anywhere.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner2.svg" alt="Visual Studio" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    There are powerful new features in Visual Studio for building modern web apps.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525030&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner3.svg" alt="Package Management" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Bring in libraries from NuGet, Bower, and npm, and automate tasks using Grunt or Gulp.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner4.svg" alt="Microsoft Azure" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Learn how Microsoft's Azure cloud platform allows you to build, deploy, and scale web apps.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525027&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
    </div>
    <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

<div class="row">
    <div class="col-md-3">
        <h2>Application uses</h2>
        <ul>
            <li>Sample pages using ASP.NET Core MVC</li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=518004">Bower</a> for managing client-side libraries</li>
            <li>Theming using <a href="https://go.microsoft.com/fwlink/?LinkID=398939">Bootstrap</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>How to</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398600">Add a Controller and View</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699315">Manage User Secrets using Secret Manager.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699316">Use logging to log a message.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699317">Add packages using NuGet.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699318">Add client packages using Bower.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699319">Target development, staging or production environment.</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Overview</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=518008">Conceptual overview of what is ASP.NET Core</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699320">Fundamentals of ASP.NET Core such as Startup and middleware.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398602">Working with Data</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398603">Security</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699321">Client side development</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699322">Develop on different platforms</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699323">Read more on the documentation site</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Run & Deploy</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517851">Run your app</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517853">Run tools such as EF migrations and more</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398609">Publish to Microsoft Azure Web Apps</a></li>
        </ul>
    </div>
</div>


<div>
    <h1>WebSocket Sample Application</h1>

    <p id="stateLabel">Ready to connect...</p>

    <div>

        <label for="connectionUrl">WebSocket Server URL:</label>

        <input id="connectionUrl" />

        <button id="connectButton" type="submit">Connect</button>

    </div>

    <p></p>

    <div>

        <label for="sendMessage">Message to send:</label>

        <input id="sendMessage" disabled />

        <button id="sendButton" type="submit" disabled>Send</button>

        <button id="closeButton" disabled>Close Socket</button>

    </div>



    <h2>Communication Log</h2>

    <table style="width: 800px">

        <thead>

            <tr>

                <td style="width: 100px">From</td>

                <td style="width: 100px">To</td>

                <td>Data</td>

            </tr>

        </thead>

        <tbody id="commsLog"></tbody>

    </table>



    <script>

        var connectionForm = document.getElementById("connectionForm");

        var connectionUrl = document.getElementById("connectionUrl");

        var connectButton = document.getElementById("connectButton");

        var stateLabel = document.getElementById("stateLabel");

        var sendMessage = document.getElementById("sendMessage");

        var sendButton = document.getElementById("sendButton");

        var sendForm = document.getElementById("sendForm");

        var commsLog = document.getElementById("commsLog");



        var socket;



        var scheme = document.location.protocol == "https:" ? "wss" : "ws";

        var port = document.location.port ? (":" + document.location.port) : "";



        connectionUrl.value = scheme + "://" + document.location.hostname + port + "/ws";



        function updateState() {

            function disable() {

                sendMessage.disabled = true;

                sendButton.disabled = true;

                closeButton.disabled = true;

            }

            function enable() {

                sendMessage.disabled = false;

                sendButton.disabled = false;

                closeButton.disabled = false;

            }



            connectionUrl.disabled = true;

            connectButton.disabled = true;



            if (!socket) {

                disable();

            } else {

                switch (socket.readyState) {

                    case WebSocket.CLOSED:

                        stateLabel.innerHTML = "Closed";

                        disable();

                        connectionUrl.disabled = false;

                        connectButton.disabled = false;

                        break;

                    case WebSocket.CLOSING:

                        stateLabel.innerHTML = "Closing...";

                        disable();

                        break;

                    case WebSocket.CONNECTING:

                        stateLabel.innerHTML = "Connecting...";

                        disable();

                        break;

                    case WebSocket.OPEN:

                        stateLabel.innerHTML = "Open";

                        enable();

                        break;

                    default:

                        stateLabel.innerHTML = "Unknown WebSocket State: " + socket.readyState;

                        disable();

                        break;

                }

            }

        }



        closeButton.onclick = function () {

            if (!socket || socket.readyState != WebSocket.OPEN) {

                alert("socket not connected");

            }

            socket.close(1000, "Closing from client");

        }



        sendButton.onclick = function () {

            if (!socket || socket.readyState != WebSocket.OPEN) {

                alert("socket not connected");

            }

            var data = sendMessage.value;

            socket.send(data);

            commsLog.innerHTML += '<tr>' +

                '<td class="commslog-client">Client</td>' +

                '<td class="commslog-server">Server</td>' +

                '<td class="commslog-data">' + data + '</td>'

            '</tr>';

        }



        connectButton.onclick = function () {

            stateLabel.innerHTML = "Connecting";

            socket = new WebSocket(connectionUrl.value);

            socket.onopen = function (event) {

                updateState();

                commsLog.innerHTML += '<tr>' +

                    '<td colspan="3" class="commslog-data">Connection opened</td>' +

                    '</tr>';

            };

            socket.onclose = function (event) {

                updateState();

                commsLog.innerHTML += '<tr>' +

                    '<td colspan="3" class="commslog-data">Connection closed. Code: ' + event.code + '. Reason: ' + event.reason + '</td>' +

                    '</tr>';

            };

            socket.onerror = updateState;

            socket.onmessage = function (event) {

                commsLog.innerHTML += '<tr>' +

                    '<td class="commslog-server">Server</td>' +

                    '<td class="commslog-client">Client</td>' +

                    '<td class="commslog-data">' + event.data + '</td>'

                '</tr>';

            };

        };

    </script>
</div>
